{
  "createdAt": "2025-03-17T21:56:33.169Z",
  "updatedAt": "2025-04-12T23:56:45.456Z",
  "id": "eNEBrtryVBHsJPIp",
  "name": "jobber_sync v3",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -460,
        0
      ],
      "id": "e0b5a13c-a733-42be-a33e-0c90907eedbd",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da7dcbb5-9ca9-4926-8e09-286907986e21",
              "leftValue": "={{ $('Pagination').item.json.continuePagination }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1580,
        -20
      ],
      "id": "a710cc55-f1d5-4307-a411-ed0a1d152f18",
      "name": "batch loop"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eff9cc2d-c364-4859-902e-3ceb34481092",
              "name": "variables.first",
              "value": "={{ $('Pagination').item.json.variables.first }}",
              "type": "number"
            },
            {
              "id": "499c7162-3df3-484c-85c2-d5f72b7bd3ec",
              "name": "variables.after",
              "value": "={{ $('Pagination').item.json.variables.after }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1360,
        -20
      ],
      "id": "f8e1fedb-8d61-4eba-b367-c6fde469117f",
      "name": "set loop"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1160,
        -20
      ],
      "id": "6f19b68e-c932-4e86-ac7c-844a47248f9a",
      "name": "Limit"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "counter",
        "value": "0"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        40,
        -20
      ],
      "id": "7d4a8a52-9b2a-4ce9-b12f-ae39e9950298",
      "name": "Init counter",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2020,
        -20
      ],
      "id": "1bf62c18-fd3a-41cb-bbbe-81e2c3dd6cae",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "jsCode": "// Pegando o primeiro item do array 'items' no contexto do n8n\nconst result = items[0].json;\n\nif (!result?.data?.clients?.nodes) {\n    return [{\n        json: {\n            error: 'Invalid response structure',\n            continuePagination: false,\n            completed: true,\n            allData: items[0].json.allData || []\n        }\n    }];\n}\n\nconst { nodes, pageInfo } = result.data.clients;\nconst allData = [...(items[0].json.allData || []), ...nodes];\n\n// Função para processar emails e phones\nfunction processContactInfo(info) {\n    if (!Array.isArray(info) || info.length === 0) {\n        return [{\n            address: null,\n            number: null,\n            description: null,\n            primary: true\n        }];\n    }\n    return info.map(item => ({\n        address: item.address || null,\n        number: item.number || null,\n        description: item.description || null,\n        primary: item.primary || false\n    }));\n}\n\n// Função para processar o billingAddress\nfunction processBillingAddress(address) {\n    return {\n        street: address?.street || null,\n        city: address?.city || null,\n        postalCode: address?.postalCode || null,\n        country: address?.country || null\n    };\n}\n\n// Aplicando a transformação nos dados\nconst transformedNodes = nodes.map(item => ({\n    ...item,\n    emails: processContactInfo(item.emails),\n    phones: processContactInfo(item.phones),\n    billingAddress: processBillingAddress(item.billingAddress)\n}));\n\n// Aplicando a mesma transformação para allData\nconst transformedAllData = allData.map(item => ({\n    ...item,\n    emails: processContactInfo(item.emails),\n    phones: processContactInfo(item.phones),\n    billingAddress: processBillingAddress(item.billingAddress)\n}));\n\nreturn [{\n    json: {\n        allData: transformedAllData,\n        data: transformedNodes,\n        variables: {\n            first: 30,\n            after: pageInfo.endCursor\n        },\n        continuePagination: pageInfo.hasNextPage,\n        completed: !pageInfo.hasNextPage\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        -20
      ],
      "id": "04e69490-9142-4c43-a59f-b4ebda6464bf",
      "name": "Pagination"
    },
    {
      "parameters": {
        "content": "## Clients\n",
        "height": 320,
        "width": 2340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        -100
      ],
      "typeVersion": 1,
      "id": "f12d94a0-608f-4493-acf8-66d8cfeef5ea",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Users\n",
        "height": 320,
        "width": 2340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        580
      ],
      "typeVersion": 1,
      "id": "a4d9a963-88a1-4dd8-98d2-f6944462cf22",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Properties\n",
        "height": 320,
        "width": 2340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        240
      ],
      "typeVersion": 1,
      "id": "0c43b65a-f2d6-4f50-93b8-8fbe0e231029",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "endpoint": "https://api.getjobber.com/api/graphql",
        "requestFormat": "json",
        "query": "query($first: Int!, $after: String) {\n  properties(first: $first, after: $after) {\n    nodes {\n      id\n      address {\n        street\n        city\n        postalCode\n        country\n      }\n      client {\n        id\n          \n     }\n      isBillingAddress\n      \n      customFields {\n        ... on CustomFieldDropdown {\n          id\n          valueDropdown\n        }\n        ... on CustomFieldText {\n          id\n          valueText\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}",
        "variables": "={{ $json.variables || {\"first\": 50, \"after\": null} }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "X-JOBBER-GRAPHQL-VERSION",
              "value": "2025-01-20"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        320,
        320
      ],
      "id": "4b0442b5-2c39-4b29-9dad-6b73d799f1a9",
      "name": "jobber query - properties",
      "credentials": {
        "oAuth2Api": {
          "id": "bYFIrqt2IbgZU5Z1",
          "name": "JobberAPI_BI Compass APP"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da7dcbb5-9ca9-4926-8e09-286907986e21",
              "leftValue": "={{ $('Pagination5').item.json.continuePagination }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1580,
        320
      ],
      "id": "e95f4118-6452-4c9f-b94e-a14d7f9afc03",
      "name": "batch loop6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eff9cc2d-c364-4859-902e-3ceb34481092",
              "name": "variables.first",
              "value": "={{ $('Pagination5').item.json.variables.first }}",
              "type": "number"
            },
            {
              "id": "499c7162-3df3-484c-85c2-d5f72b7bd3ec",
              "name": "variables.after",
              "value": "={{ $('Pagination5').item.json.variables.after }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1380,
        320
      ],
      "id": "81f2a589-9c20-4aa9-870b-f75b4ed34c66",
      "name": "set loop6"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1160,
        320
      ],
      "id": "1d6c6752-7af0-44b1-9c6b-4a3a69853367",
      "name": "Limit6"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "counter",
        "value": "0"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        40,
        320
      ],
      "id": "52ed1848-1120-42d7-b47f-668c83229b5d",
      "name": "Init counter6",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2020,
        320
      ],
      "id": "5b71b5e7-0412-413e-9e43-ca1228439e25",
      "name": "No Operation, do nothing6"
    },
    {
      "parameters": {
        "jsCode": "// Pegando o primeiro item do array 'items' no contexto do n8n\nconst result = items[0].json;\n\n// Verifica se a estrutura contém o array de properties (nós)\nif (!result?.data?.properties?.nodes) {\n  return [{\n    json: {\n      error: 'Invalid response structure',\n      continuePagination: false,\n      completed: true,\n      allData: items[0].json.allData || []\n    }\n  }];\n}\n\nconst { nodes, pageInfo } = result.data.properties;\nconst allData = [...(items[0].json.allData || []), ...nodes];\n\n// Função para processar o endereço\nfunction processAddress(address) {\n  if (!address) {\n    return {\n      street: null,\n      city: null,\n      postalCode: null,\n      country: null\n    };\n  }\n  return {\n    street: address.street || null,\n    city: address.city || null,\n    postalCode: address.postalCode || null,\n    country: address.country || null\n  };\n}\n\n// Função para processar o cliente\nfunction processClient(client) {\n  return client ? { id: client.id || null } : null;\n}\n\n// Função para processar apenas os customFields dos índices 0, 1 e 6\nfunction processCustomFields(fields) {\n  if (!Array.isArray(fields)) return [];\n  const indices = [0, 1, 6]; // Apenas os itens 0, 1 e 6\n  return indices.map(index => {\n    const field = fields[index] || {};\n    return {\n      id: field.id || null,\n      valueDropdown: field.valueDropdown || null,\n      valueText: field.valueText || null\n    };\n  });\n}\n\n// Transformação dos nodes (propriedades) para padronizar os dados\nconst transformedNodes = nodes.map(item => ({\n  ...item,\n  address: processAddress(item.address),\n  client: processClient(item.client),\n  customFields: processCustomFields(item.customFields)\n}));\n\n// Aplicando a mesma transformação para allData (caso haja paginação acumulada)\nconst transformedAllData = allData.map(item => ({\n  ...item,\n  address: processAddress(item.address),\n  client: processClient(item.client),\n  customFields: processCustomFields(item.customFields)\n}));\n\n// Retorna os dados transformados junto com as variáveis de paginação\nreturn [{\n  json: {\n    allData: transformedAllData,\n    data: transformedNodes,\n    variables: {\n      first: 50,           // Exemplo: quantidade de itens por página\n      after: pageInfo.endCursor\n    },\n    continuePagination: pageInfo.hasNextPage,\n    completed: !pageInfo.hasNextPage\n  }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        320
      ],
      "id": "09786219-4219-447a-bd6a-1c53022aa7e8",
      "name": "Pagination5"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst allData = inputData[0]?.json?.allData || [];\nreturn allData.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        320
      ],
      "id": "94e71804-8f31-4551-b51d-bb853e60df01",
      "name": "Set Array6"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst allData = inputData[0]?.json?.allData || [];\nreturn allData.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        -20
      ],
      "id": "a917538b-be0d-4469-aebc-6103bc3558b5",
      "name": "Set Array1"
    },
    {
      "parameters": {
        "content": "## Requests",
        "height": 320,
        "width": 2340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        920
      ],
      "typeVersion": 1,
      "id": "9621a55f-824b-42e3-bccc-2203f4952fa3",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "tableId": "clients",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "jobber_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "first_name",
              "fieldValue": "={{ $json.firstName }}"
            },
            {
              "fieldId": "last_name",
              "fieldValue": "={{ $json.lastName }}"
            },
            {
              "fieldId": "company_name",
              "fieldValue": "={{ $json.companyName }}"
            },
            {
              "fieldId": "phone",
              "fieldValue": "={{ $json.phones[0].number }}"
            },
            {
              "fieldId": "billing_address_street",
              "fieldValue": "={{ $json.billingAddress.street }}"
            },
            {
              "fieldId": "is_company",
              "fieldValue": "={{ $json.isCompany }}"
            },
            {
              "fieldId": "is_lead",
              "fieldValue": "={{ $json.isLead }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $json.createdAt }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $json.updatedAt }}"
            },
            {
              "fieldId": "billing_address_postcode",
              "fieldValue": "={{ $json.billingAddress.postalCode }}"
            },
            {
              "fieldId": "billing_address_city",
              "fieldValue": "={{ $json.billingAddress.city }}"
            },
            {
              "fieldId": "billing_address_country",
              "fieldValue": "={{ $json.billingAddress.country }}"
            },
            {
              "fieldId": "phone_is_primary",
              "fieldValue": "={{ $json.phones[0].primary }}"
            },
            {
              "fieldId": "phone_description",
              "fieldValue": "={{ $json.phones[0].description }}"
            },
            {
              "fieldId": "email_is_primary",
              "fieldValue": "={{ $json.emails[0].primary }}"
            },
            {
              "fieldId": "email_description",
              "fieldValue": "={{ $json.emails[0].description }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ $json.emails[0].address }}"
            },
            {
              "fieldId": "referred_by",
              "fieldValue": "={{ $json.customFields[0].valueText }}"
            },
            {
              "fieldId": "lead_source",
              "fieldValue": "={{ $json.sourceAttribution.sourceText }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        900,
        -20
      ],
      "id": "59c15524-21a1-453b-9d70-2605a2b65676",
      "name": "Supabase_clients",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "properties",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "jobber_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "client_jobber_id",
              "fieldValue": "={{ $json.client.id }}"
            },
            {
              "fieldId": "is_billing_address",
              "fieldValue": "={{ $json.isBillingAddress }}"
            },
            {
              "fieldId": "service_street",
              "fieldValue": "={{ $json.address.street }}"
            },
            {
              "fieldId": "service_city",
              "fieldValue": "={{ $json.address.city }}"
            },
            {
              "fieldId": "service_postcode",
              "fieldValue": "={{ $json.address.postalCode }}"
            },
            {
              "fieldId": "service_country",
              "fieldValue": "={{ $json.address.country }}"
            },
            {
              "fieldId": "nb_of_bedrooms",
              "fieldValue": "={{ $json.customFields[0].valueDropdown }}"
            },
            {
              "fieldId": "nb_of_bathrooms",
              "fieldValue": "={{ $json.customFields[1].valueDropdown }}"
            },
            {
              "fieldId": "visit_slot",
              "fieldValue": "={{ $json.customFields[6].valueDropdown }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        900,
        320
      ],
      "id": "e355b169-c930-4adc-9202-73aac9562298",
      "name": "Supabase_properties",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "endpoint": "https://api.getjobber.com/api/graphql",
        "requestFormat": "json",
        "query": "query($first: Int!, $after: String) {\n  clients(first: $first, after: $after) {\n    nodes {\n      id\n      firstName\n      lastName\n      companyName\n      emails {\n        address\n        description\n        primary\n      }\n      phones {\n        number\n        description\n        primary        \n      }\n      billingAddress {\n        street\n        city\n        postalCode\n        country\n      }\n      \n      isCompany\n      isLead\n      createdAt\n      updatedAt\n      sourceAttribution {\n      sourceText\n      source {\n        ... on CustomLeadSource {\n          id\n          label\n        }\n      }\n    }\n      tags {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      customFields {\n        ... on CustomFieldDropdown {\n          id\n          valueDropdown\n        }\n        ... on CustomFieldText {\n          id\n          valueText\n        }        \n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}",
        "variables": "={{ $json.variables || {\"first\": 30, \"after\": null} }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "X-JOBBER-GRAPHQL-VERSION",
              "value": "2025-01-20"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        320,
        -20
      ],
      "id": "2daeb6c5-319d-4c07-89ab-a3cdcfa69397",
      "name": "jobber_query",
      "credentials": {
        "oAuth2Api": {
          "id": "bYFIrqt2IbgZU5Z1",
          "name": "JobberAPI_BI Compass APP"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da7dcbb5-9ca9-4926-8e09-286907986e21",
              "leftValue": "={{ $('Pagination4').item.json.continuePagination }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1600,
        660
      ],
      "id": "38d42d98-2830-48c6-9af7-86ad87f6fcc6",
      "name": "batch loop5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eff9cc2d-c364-4859-902e-3ceb34481092",
              "name": "variables.first",
              "value": "={{ $('Pagination4').item.json.variables.first }}",
              "type": "number"
            },
            {
              "id": "499c7162-3df3-484c-85c2-d5f72b7bd3ec",
              "name": "variables.after",
              "value": "={{ $('Pagination4').item.json.variables.after }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1380,
        660
      ],
      "id": "41d88f6f-6eb2-4270-a432-dfce0330ae1a",
      "name": "set loop5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1160,
        660
      ],
      "id": "5bf7358b-e9c9-4473-8022-eef9fa694720",
      "name": "Limit5"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "counter",
        "value": "0"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        40,
        660
      ],
      "id": "0e4db8e8-2abd-4c4b-8d33-96572e665eda",
      "name": "Init counter5",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2020,
        660
      ],
      "id": "d3104ac4-d101-45db-b705-fc7d84192a7c",
      "name": "No Operation, do nothing5"
    },
    {
      "parameters": {
        "jsCode": "// Obtendo o primeiro item do array 'items' no contexto do n8n\nconst result = items[0].json;\n\n// Verifica se a estrutura contém o array de usuários\nif (!result?.data?.users?.nodes) {\n  return [{\n    json: {\n      error: 'Invalid response structure',\n      continuePagination: false,\n      completed: true,\n      allData: items[0].json.allData || []\n    }\n  }];\n}\n\nconst { nodes, pageInfo } = result.data.users;\nconst allData = [...(items[0].json.allData || []), ...nodes];\n\n// Função para processar o campo de email\nfunction processEmail(email) {\n  return {\n    raw: email?.raw || null,\n    isValid: email?.isValid || false\n  };\n}\n\n// Função para processar o endereço\nfunction processAddress(address) {\n  if (!address) return {\n    street: null,\n    city: null,\n    province: null,\n    postalCode: null,\n    country: null\n  };\n  return {\n    street: address.street || null,\n    city: address.city || null,\n    province: address.province || null,\n    postalCode: address.postalCode || null,\n    country: address.country || null\n  };\n}\n\n// Função para processar o telefone\nfunction processPhone(phone) {\n  return {\n    areaCode: phone?.areaCode || null,\n    countryCode: phone?.countryCode || null,\n    friendly: phone?.friendly || null,\n    isValid: phone?.isValid || false,\n    raw: phone?.raw || null\n  };\n}\n\n// Transformação dos nós (usuários) para padronizar os dados\nconst transformedNodes = nodes.map(item => ({\n  ...item,\n  email: processEmail(item.email),\n  address: processAddress(item.address),\n  phone: processPhone(item.phone)\n}));\n\n// Transformação do allData para manter a consistência (caso venha de uma paginação anterior)\nconst transformedAllData = allData.map(item => ({\n  ...item,\n  email: processEmail(item.email),\n  address: processAddress(item.address),\n  phone: processPhone(item.phone)\n}));\n\n// Retorna os dados transformados junto com as variáveis de paginação\nreturn [{\n  json: {\n    allData: transformedAllData,\n    data: transformedNodes,\n    variables: {\n      first: 10,           // Exemplo: quantidade de itens por página\n      after: pageInfo.endCursor\n    },\n    continuePagination: pageInfo.hasNextPage,\n    completed: !pageInfo.hasNextPage\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        660
      ],
      "id": "ed753c02-a168-43bd-936a-1724ee274511",
      "name": "Pagination4"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst allData = inputData[0]?.json?.allData || [];\nreturn allData.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        660
      ],
      "id": "126e8761-f748-4c1e-982a-939dbfd03937",
      "name": "Set Array5"
    },
    {
      "parameters": {
        "tableId": "users",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "jobber_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "first_name",
              "fieldValue": "={{ $json.name.first }}"
            },
            {
              "fieldId": "last_name",
              "fieldValue": "={{ $json.name.last }}"
            },
            {
              "fieldId": "full_name",
              "fieldValue": "={{ $json.name.full }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ $json.email.raw }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "={{ $json.status }}"
            },
            {
              "fieldId": "is_account_admin",
              "fieldValue": "={{ $json.isAccountAdmin }}"
            },
            {
              "fieldId": "is_account_owner",
              "fieldValue": "={{ $json.isAccountOwner }}"
            },
            {
              "fieldId": "is_current_user",
              "fieldValue": "={{ $json.isCurrentUser }}"
            },
            {
              "fieldId": "available_for_scheduling",
              "fieldValue": "={{ $json.availableForScheduling }}"
            },
            {
              "fieldId": "first_day_of_the_week",
              "fieldValue": "={{ $json.firstDayOfTheWeek }}"
            },
            {
              "fieldId": "last_login_at",
              "fieldValue": "={{ $json.lastLoginAt }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $json.createdAt }}"
            },
            {
              "fieldId": "phone",
              "fieldValue": "={{ $json.phone.raw }}"
            },
            {
              "fieldId": "timezone",
              "fieldValue": "={{ $json.timezone }}"
            },
            {
              "fieldId": "address_street",
              "fieldValue": "={{ $json.address.street }}"
            },
            {
              "fieldId": "address_city",
              "fieldValue": "={{ $json.address.city }}"
            },
            {
              "fieldId": "address_postcode",
              "fieldValue": "={{ $json.address.postalCode }}"
            },
            {
              "fieldId": "address_country",
              "fieldValue": "={{ $json.address.country }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        900,
        660
      ],
      "id": "b7b15823-3c74-4950-bde6-00b955d0618e",
      "name": "Supabase_users",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "endpoint": "https://api.getjobber.com/api/graphql",
        "requestFormat": "json",
        "query": "=query($first: Int!, $after: String) {\n  users(first: $first, after: $after) {\n    nodes {\n      id\n      name {\n        first\n        last\n        full\n      }\n      email {\n      raw\n      isValid\n      }\n      uuid\n      status\n      isAccountAdmin\n      isAccountOwner\n      isCurrentUser\n      availableForScheduling\n      firstDayOfTheWeek\n      franchiseTokenLastFour\n      lastLoginAt\n      createdAt\n      \n      account {\n        id\n      }\n      \n      address {\n        street\n        city\n        province\n        postalCode\n        country\n      }\n      \n      apps {\n        nodes {\n          id\n        }\n      }\n      \n      assignedVehicle {\n        id\n      }\n      \n      phone {\n        areaCode\n        countryCode\n        friendly\n        isValid\n        raw\n      }\n      timezone\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}",
        "variables": "={{ $json.variables || {\"first\": 10, \"after\": null} }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "X-JOBBER-GRAPHQL-VERSION",
              "value": "2025-01-20"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        320,
        660
      ],
      "id": "3f35365f-bafb-410a-bd09-0182fe682867",
      "name": "jobber query - users1",
      "credentials": {
        "oAuth2Api": {
          "id": "bYFIrqt2IbgZU5Z1",
          "name": "JobberAPI_BI Compass APP"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da7dcbb5-9ca9-4926-8e09-286907986e21",
              "leftValue": "={{ $('Pagination6').item.json.continuePagination }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1600,
        980
      ],
      "id": "635ce080-c28b-432c-a48d-edfc4ee89e5f",
      "name": "batch loop7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eff9cc2d-c364-4859-902e-3ceb34481092",
              "name": "variables.first",
              "value": "={{ $('Pagination6').item.json.variables.first }}",
              "type": "number"
            },
            {
              "id": "499c7162-3df3-484c-85c2-d5f72b7bd3ec",
              "name": "variables.after",
              "value": "={{ $('Pagination6').item.json.variables.after }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1380,
        980
      ],
      "id": "6842a16f-8bb1-4917-986c-9c818f8e8d4c",
      "name": "set loop7"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1160,
        980
      ],
      "id": "c9b3bb26-ace0-4459-a0e7-ecf2a44075b3",
      "name": "Limit7"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "counter",
        "value": "0"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        40,
        980
      ],
      "id": "24e7c54c-a265-4e68-9752-222bc6c9bd5f",
      "name": "Init counter7",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the input data from the GraphQL node\nconst inputData = $input.all();\nlet allData = [];\n\n// Process each input item (typically just one from GraphQL node)\nfor (const item of inputData) {\n  // Check if item has the expected structure\n  if (item.json.data && item.json.data.requests && item.json.data.requests.nodes) {\n    // Extract all request nodes and add them to our collection\n    const nodes = item.json.data.requests.nodes;\n    allData = allData.concat(nodes);\n  }\n}\n\n// Get pagination info\nconst pageInfo = inputData[0]?.json?.data?.requests?.pageInfo || null;\n\n// Prepare variables for next GraphQL call if there are more pages\nconst variables = {\n  first: 50,  // Explicitly set as a number\n  after: pageInfo?.endCursor || null\n};\n\n// Create a single output item with all the collected data\nconst output = {\n  json: {\n    allData: allData,\n    pageInfo: pageInfo,\n    variables: variables  // Include variables for next call\n  }\n};\n\nreturn [output];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        980
      ],
      "id": "69c74a7c-c7ca-4c11-b02c-0e8361d1fc25",
      "name": "Pagination6"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst allData = inputData[0]?.json?.allData || [];\nreturn allData.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        980
      ],
      "id": "f6a44fc6-0ce7-4455-b439-363666822481",
      "name": "Set Array7"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "endpoint": "https://api.getjobber.com/api/graphql",
        "requestFormat": "json",
        "query": "query($first: Int!, $after: String) {\n  requests(first: $first, after: $after) {\n    nodes {\n      id\n      title\n      client {\n        id\n      }\n      requestStatus\n      source\n      createdAt\n      assessment {\n        id\n        title\n        allDay\n        startAt\n        endAt\n        assignedUsers {\n          nodes {\n            id\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n",
        "variables": "={{ $json.variables || {\"first\": 50, \"after\": null} }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "X-JOBBER-GRAPHQL-VERSION",
              "value": "2025-01-20"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        320,
        980
      ],
      "id": "5592d62a-d09b-43a7-85d2-7221cb4e9c44",
      "name": "jobber query - requests",
      "credentials": {
        "oAuth2Api": {
          "id": "bYFIrqt2IbgZU5Z1",
          "name": "JobberAPI_BI Compass APP"
        }
      }
    },
    {
      "parameters": {
        "tableId": "requests",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "jobber_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "client_jobber_id",
              "fieldValue": "={{ $json.client.id }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.title }}"
            },
            {
              "fieldId": "request_status",
              "fieldValue": "={{ $json.requestStatus }}"
            },
            {
              "fieldId": "source",
              "fieldValue": "={{ $json.source }}"
            },
            {
              "fieldId": "assessment_json",
              "fieldValue": "={{ $json.assessment }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $json.createdAt }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        900,
        980
      ],
      "id": "39f48442-cdf7-4078-ab35-89621347ab42",
      "name": "Supabase_requests",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2040,
        980
      ],
      "id": "7ff7c225-f86d-449e-b3f9-3f01e18a325d",
      "name": "No Operation, do nothing7"
    },
    {
      "parameters": {
        "content": "## Visits\n",
        "height": 1000,
        "width": 2340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        2520
      ],
      "typeVersion": 1,
      "id": "5e0d9c7d-25f0-4b72-9aa1-564af8a09b21",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "aux_buffer",
        "keyType": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        520,
        2840
      ],
      "id": "edb6e786-3a3d-4c69-93e3-bb7440d0987e",
      "name": "Retrieve aux_buffer",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "aux_buffer",
        "messageData": "={{ JSON.stringify($json) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        920,
        2600
      ],
      "id": "936fd7ba-ad66-41ee-beb6-50e7d59ea81b",
      "name": "Push aux_buffer",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        940,
        2840
      ],
      "id": "c0822a42-f6f2-4c75-8c94-50cf26fab300",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        940,
        3180
      ],
      "id": "2b4d7a32-bf03-4f34-9613-b7dd5bcd65d5",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2060,
        3000
      ],
      "id": "d60f68b4-be1b-41e2-bf56-34ddcb1b0975",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "try {\n    const responseData = item.json || item;\n    const result = Array.isArray(responseData) ? responseData[0] : responseData;\n    \n    if (!result?.data?.visits) {\n        throw new Error('Invalid response structure');\n    }\n    \n    const { nodes, pageInfo } = result.data.visits;\n    const existingData = Array.isArray(item?.json?.allData) ? item.json.allData : [];\n    const allData = [...existingData, ...nodes];\n\n    return {\n        json: {\n            allData,\n            data: nodes,\n            variables: {\n                first: 1,\n                after: pageInfo.endCursor\n            },\n            continuePagination: pageInfo.hasNextPage,\n            completed: !pageInfo.hasNextPage\n        }\n    };\n} catch (error) {\n    console.log('Error:', error.message);\n    return {\n        json: {\n            error: error.message,\n            continuePagination: false,\n            completed: true,\n            allData: item.json.allData || []\n        }\n    };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        2600
      ],
      "id": "1f4faae9-72bf-47df-9ec9-ba963147e275",
      "name": "pagination1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da7dcbb5-9ca9-4926-8e09-286907986e21",
              "leftValue": "={{ $('pagination1').item.json.continuePagination }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        320,
        2840
      ],
      "id": "10654bb3-a06c-4a0f-8495-74e790de620e",
      "name": "batch loop8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eff9cc2d-c364-4859-902e-3ceb34481092",
              "name": "variables.first",
              "value": "={{ $('pagination1').item.json.variables.first }}",
              "type": "number"
            },
            {
              "id": "499c7162-3df3-484c-85c2-d5f72b7bd3ec",
              "name": "variables.after",
              "value": "={{ $('pagination1').item.json.variables.after }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1600,
        2600
      ],
      "id": "e0a51c5b-c594-4b55-9977-baa14c60508d",
      "name": "set loop8"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst allData = inputData[0]?.json?.allData || [];\nreturn allData.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        2600
      ],
      "id": "dc798b6a-d19b-4591-ba15-aa085b53b0df",
      "name": "Set Array8"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1400,
        2600
      ],
      "id": "c2d0b84b-cd3e-4b05-b0f6-da88a6242f6a",
      "name": "Limit8"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\nconst data = input[0].json.data;\n\nconst result = data.map(item => ({\n  json: JSON.parse(item)\n}));\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        2840
      ],
      "id": "6b21d163-3ca9-4697-9792-2fc69ab80632",
      "name": "Set Array9"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst data = inputData[0]?.json || {};\n\nreturn data.assignedUsers.edges.map(user => ({\n    json: {\n        visit_id: data.id, // \n        firstname: user.node.name.first,\n        lastname: user.node.name.last\n    }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        2940
      ],
      "id": "a11c35f8-009d-47ee-ae1f-62e532c47681",
      "name": "Set Array10",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst data = inputData[0]?.json || {};\nreturn (data.lineItems?.edges || []).map(edge => ({ \n  json: { \n    visit_id: data.id, \n    id: edge.node.id, \n    name: edge.node.name, \n    quantity: edge.node.quantity, \n    totalPrice: edge.node.totalPrice \n  } \n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        3280
      ],
      "id": "e67ab464-a78f-463e-8461-9b39227b635a",
      "name": "Set Array11",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2060,
        3160
      ],
      "id": "d25a1097-4dc0-4b58-8334-1abfd536a581",
      "name": "No Operation, do nothing8"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2060,
        2820
      ],
      "id": "d0cf3ef9-dddd-4144-bebd-20c8ab27f96a",
      "name": "No Operation, do nothing9"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "aux_buffer"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        60,
        2840
      ],
      "id": "dfbd004c-c47a-409b-9521-0dae8a24975d",
      "name": "zap aux_buffer",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "visits_users",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "visit_id",
              "fieldValue": "={{ $json.visit_id }}"
            },
            {
              "fieldId": "first_name",
              "fieldValue": "={{ $json.firstname }}"
            },
            {
              "fieldId": "last_name",
              "fieldValue": "={{ $json.lastname }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1600,
        2940
      ],
      "id": "57bd47f7-eabd-4659-8302-8d61896e8372",
      "name": "Supabase_visits2",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "visits_items",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "visit_id",
              "fieldValue": "={{ $json.visit_id }}"
            },
            {
              "fieldId": "item_name",
              "fieldValue": "={{ $json.name }}"
            },
            {
              "fieldId": "quantity",
              "fieldValue": "={{ $json.quantity }}"
            },
            {
              "fieldId": "total_price",
              "fieldValue": "={{ $json.totalPrice }}"
            },
            {
              "fieldId": "jobber_id",
              "fieldValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1600,
        3280
      ],
      "id": "df6b4eec-911b-4885-9837-e7022a19612a",
      "name": "Supabase_visits3",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Quotes\n",
        "height": 600,
        "width": 2340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        1260
      ],
      "typeVersion": 1,
      "id": "059f1632-0eab-4985-829b-6048bef6bea0",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "endpoint": "https://api.getjobber.com/api/graphql",
        "requestFormat": "json",
        "query": "=query($first: Int!, $after: String) {\n  quotes(first: $first, after: $after) {\n    nodes {\n      id\n      title\n      quoteNumber\n      quoteStatus\n      message\n      amounts {\n        subtotal\n        total\n      }\n      \n            \n      lineItems {\n        nodes {\n          id\n          name\n          quantity\n          unitPrice\n          totalPrice\n        }\n      }\n      \n      property {\n        id\n      }\n      \n      request {\n        id\n        title\n      }\n      \n      salesperson {\n        id\n      }\n      \n      taxDetails {\n        totalTaxAmount\n        totalTaxRate {\n          id\n          name\n          # Removed 'rate' field as it doesn't exist on TaxRateBase\n        }\n      }\n      \n      unallocatedDepositRecords {\n        nodes {\n          id\n        }\n      }\n      \n      createdAt\n      updatedAt\n      transitionedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}",
        "variables": "={{ $json.variables || {\"first\": 5, \"after\": null} }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "X-JOBBER-GRAPHQL-VERSION",
              "value": "2025-01-20"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        320,
        1320
      ],
      "id": "d8bc56e6-2262-4235-b222-4063e1fe830d",
      "name": "jobber query - quotes",
      "credentials": {
        "oAuth2Api": {
          "id": "bYFIrqt2IbgZU5Z1",
          "name": "JobberAPI_BI Compass APP"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da7dcbb5-9ca9-4926-8e09-286907986e21",
              "leftValue": "={{ $('Pagination3').item.json.continuePagination }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        340,
        1560
      ],
      "id": "59e9d98e-e117-4fcb-993a-003d8978db13",
      "name": "batch loop4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eff9cc2d-c364-4859-902e-3ceb34481092",
              "name": "variables.first",
              "value": "={{ $('Pagination3').item.json.variables.first }}",
              "type": "number"
            },
            {
              "id": "499c7162-3df3-484c-85c2-d5f72b7bd3ec",
              "name": "variables.after",
              "value": "={{ $('Pagination3').item.json.variables.after }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1600,
        1320
      ],
      "id": "6363727e-71b4-4498-a9c4-6d4890ff1fb2",
      "name": "set loop4"
    },
    {
      "parameters": {
        "jsCode": "// Pegando o primeiro item do array 'items' no contexto do n8n\nconst result = items[0].json;\nif (!result?.data?.quotes?.nodes) {\n    return [{\n        json: {\n            error: 'Estrutura de resposta inválida',\n            continuePagination: false,\n            completed: true,\n            allData: items[0].json.allData || []\n        }\n    }];\n}\nconst { nodes, pageInfo } = result.data.quotes;\n\n// Função para processar amounts\nfunction processAmounts(amounts) {\n    if (!amounts) return null;\n    return {\n        subtotal: amounts.subtotal || null,\n        total: amounts.total || null\n    };\n}\n\n// Função para processar lineItems.nodes\nfunction processLineItems(lineItems) {\n    if (!lineItems || !lineItems.nodes) return null;\n    return {\n        nodes: lineItems.nodes.map(node => ({\n            id: node.id || null,\n            name: node.name || null,\n            quantity: node.quantity || null,\n            unitPrice: node.unitPrice || null,\n            totalPrice: node.totalPrice || null\n        }))\n    };\n}\n\n// Função para processar property\nfunction processProperty(property) {\n    if (!property) return null;\n    return {\n        id: property.id || null\n    };\n}\n\n// Função ajustada para garantir request.id e request.title sempre presentes\nfunction processRequest(request) {\n    return {\n        id: request?.id ?? null,\n        title: request?.title ?? null\n    };\n}\n\n\nfunction processSalesperson(salesperson) {\n    return {\n        id: salesperson?.id ?? null\n    };\n}\n\n// Função para processar taxDetails\nfunction processTaxDetails(taxDetails) {\n    if (!taxDetails) return null;\n    return {\n        totalTaxAmount: taxDetails.totalTaxAmount || null,\n        totalTaxRate: taxDetails.totalTaxRate ? {\n            id: taxDetails.totalTaxRate.id || null,\n            name: taxDetails.totalTaxRate.name || null\n        } : null\n    };\n}\n\n// Função para processar unallocatedDepositRecords\nfunction processUnallocatedDepositRecords(records) {\n    if (!records || !records.nodes) return null;\n    return {\n        nodes: records.nodes.map(node => ({\n            id: node.id || null\n        }))\n    };\n}\n\n// Transform only new nodes\nconst transformedNodes = nodes.map(item => ({\n    id: item.id,\n    title: item.title,\n    quoteNumber: item.quoteNumber,\n    quoteStatus: item.quoteStatus,\n    message: item.message,\n    createdAt: item.createdAt,\n    updatedAt: item.updatedAt,\n    transitionedAt: item.transitionedAt,\n    amounts: processAmounts(item.amounts),\n    lineItems: processLineItems(item.lineItems),\n    property: processProperty(item.property),\n    request: processRequest(item.request),\n    salesperson: processSalesperson(item.salesperson),\n    taxDetails: processTaxDetails(item.taxDetails),\n    unallocatedDepositRecords: processUnallocatedDepositRecords(item.unallocatedDepositRecords)\n}));\n\n// Add transformed nodes to allData without re-transforming (improved clarity)\nconst allData = [...(items[0].json.allData || []), ...transformedNodes];\n\nreturn [{\n    json: {\n        allData: allData,\n        data: transformedNodes,\n        variables: {\n            first: 5,\n            after: pageInfo.endCursor\n        },\n        continuePagination: pageInfo.hasNextPage,\n        completed: !pageInfo.hasNextPage\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        540,
        1320
      ],
      "id": "5984ee80-6b7e-46bb-8161-870f9f84b734",
      "name": "Pagination3"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst allData = inputData[0]?.json?.allData || [];\nreturn allData.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        1320
      ],
      "id": "18ee85e8-2da5-4972-9e20-798ca1de0499",
      "name": "Set Array4",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "aux_buffer",
        "keyType": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        540,
        1560
      ],
      "id": "2c283bb8-05bd-42f1-883d-4739b26805a3",
      "name": "Retrieve aux_buffer2",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "aux_buffer",
        "messageData": "={{ JSON.stringify($json) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        900,
        1320
      ],
      "id": "7675c02d-3afe-4d93-b78f-f8cbe3264292",
      "name": "Push aux_buffer1",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        980,
        1560
      ],
      "id": "d6f4cbd5-a852-41ec-9d2c-6a4935e5c2ae",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "aux_buffer",
        "keyType": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20,
        1640
      ],
      "id": "6df868b8-7888-4c8f-9342-891250ae6b50",
      "name": "Retrieve aux_buffer3",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1380,
        1320
      ],
      "id": "e57f4281-ef9c-4f17-b391-8eae0ab5e581",
      "name": "Limit9"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\nconst data = input[0].json.data;\n\nconst result = data.map(item => ({\n  json: JSON.parse(item)\n}));\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        1560
      ],
      "id": "256a9a40-c9ee-420b-ada9-f68b8c24e18f",
      "name": "Set Array12"
    },
    {
      "parameters": {
        "jsCode": "// Código n8n corrigido\nconst items = $input.all();\nconst data = items[0]?.json || {};\n\nif (!data.lineItems || !data.lineItems.nodes) {\n    throw new Error('Estrutura de dados inválida: lineItems ou nodes não encontrados');\n}\n\nreturn data.lineItems.nodes.map(item => ({\n    json: {\n        quotes_id: data.id,\n        id: item.id,\n        name: item.name,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: item.totalPrice\n    }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1380,
        1680
      ],
      "id": "00fb2b00-cff4-4c08-9529-c28312bb690a",
      "name": "Set Array13",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2060,
        1540
      ],
      "id": "78696278-7779-49bb-a6bd-fb45b9e6b026",
      "name": "No Operation, do nothing10"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "aux_buffer"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        60,
        1320
      ],
      "id": "48e29341-b3e7-4699-aeee-13a2025a5dd3",
      "name": "zap aux_buffer1",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1800,
        1680
      ],
      "id": "0c1a8695-8def-4010-b1e1-078beb6f4d6b",
      "name": "Limit1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1800,
        3280
      ],
      "id": "8818736a-6fb2-4c1a-ba74-903e3d8e3655",
      "name": "Limit4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1800,
        2940
      ],
      "id": "a7f78bc2-f157-44fc-8a36-0c1ea7b68925",
      "name": "Limit10"
    },
    {
      "parameters": {
        "content": "\n## Jobs",
        "height": 600,
        "width": 2340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        1900
      ],
      "typeVersion": 1,
      "id": "d8c3f62e-25b9-49ed-8702-3de02706309c",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da7dcbb5-9ca9-4926-8e09-286907986e21",
              "leftValue": "={{ $('Pagination7').item.json.continuePagination }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        340,
        2200
      ],
      "id": "289802c8-d62b-4dfc-a3d1-28b80edbf627",
      "name": "batch loop9"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eff9cc2d-c364-4859-902e-3ceb34481092",
              "name": "variables.first",
              "value": "={{ $('Pagination7').item.json.variables.first }}",
              "type": "number"
            },
            {
              "id": "499c7162-3df3-484c-85c2-d5f72b7bd3ec",
              "name": "variables.after",
              "value": "={{ $('Pagination7').item.json.variables.after }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1600,
        1960
      ],
      "id": "5ec269a8-e125-4633-9153-508ae6779751",
      "name": "set loop9"
    },
    {
      "parameters": {
        "jsCode": "// Function to convert ISO datetime to time format (HH:MM:SS)\nfunction convertToTimeFormat(isoString) {\n  if (!isoString) return null;\n  \n  // Parse the ISO string\n  const date = new Date(isoString);\n  \n  // Extract hours, minutes, seconds\n  const hours = date.getUTCHours().toString().padStart(2, '0');\n  const minutes = date.getUTCMinutes().toString().padStart(2, '0');\n  const seconds = date.getUTCSeconds().toString().padStart(2, '0');\n  \n  // Return in HH:MM:SS format\n  return `${hours}:${minutes}:${seconds}`;\n}\n\n// Pegando o primeiro item do array 'items' no contexto do n8n\nconst result = items[0].json;\nif (!result?.data?.jobs?.nodes) {\n    return [{\n        json: {\n            error: 'Estrutura de resposta inválida',\n            continuePagination: false,\n            completed: true,\n            allData: items[0].json.allData || []\n        }\n    }];\n}\n\nconst { nodes, pageInfo } = result.data.jobs;\nconst allData = [...(items[0].json.allData || []), ...nodes];\n\n// Função para processar property, quote, request\nfunction processEntity(entity) {\n    if (!entity) return null;\n    return {\n        id: entity.id || null\n    };\n}\n\n// Função para processar salesperson\nfunction processSalesperson(salesperson) {\n    if (!salesperson) return null;\n    return {\n        id: salesperson.id || null,\n        name: salesperson.name ? {\n            full: salesperson.name.full || null\n        } : null\n    };\n}\n\n// Função para processar lineItems.nodes\nfunction processLineItems(lineItems) {\n    if (!lineItems || !lineItems.nodes) return null;\n    return {\n        nodes: lineItems.nodes.map(node => ({\n            id: node.id || null,\n            name: node.name || null,\n            quantity: node.quantity || null,\n            unitPrice: node.unitPrice || null,\n            totalPrice: node.totalPrice || null\n        }))\n    };\n}\n\n// Função para processar assignedTo edges\nfunction processAssignedTo(assignedTo) {\n    if (!assignedTo || !assignedTo.edges) return { edges: [] };\n    \n    return {\n        edges: assignedTo.edges.map(edge => ({\n            node: edge.node ? {\n                id: edge.node.id || null,\n                name: edge.node.name ? {\n                    full: edge.node.name.full || null\n                } : null\n            } : null\n        }))\n    };\n}\n\n// Função para processar visitSchedule e remover endTime/startTime quando são null\nfunction processVisitSchedule(visitSchedule) {\n    if (!visitSchedule) return null;\n    \n    // Criar objeto resultado sem campos null\n    const result = {};\n    \n    Object.keys(visitSchedule).forEach(key => {\n        // Pular startTime e endTime se forem null\n        if ((key === 'startTime' || key === 'endTime') && visitSchedule[key] === null) {\n            return;\n        }\n        \n        // Processar subpropriedades\n        if (key === 'assignedTo') {\n            result[key] = processAssignedTo(visitSchedule[key]);\n        } else if (key === 'recurrenceSchedule') {\n            result[key] = visitSchedule[key] ? {\n                calendarRule: visitSchedule[key].calendarRule || null,\n                friendly: visitSchedule[key].friendly || null\n            } : null;\n        } else {\n            result[key] = visitSchedule[key];\n        }\n    });\n    \n    return result;\n}\n\n// Função para processar jobBalanceTotals\nfunction processJobBalanceTotals(jobBalanceTotals) {\n    if (!jobBalanceTotals) return null;\n    return {\n        outstandingAmount: jobBalanceTotals.outstandingAmount || null,\n        totalAmount: jobBalanceTotals.totalAmount || null\n    };\n}\n\n// Aplicando a transformação nos dados\nconst transformedNodes = nodes.map(item => {\n    // Only convert startAt and endAt to time format\n    const timeFormattedItem = {\n        ...item,\n        startAtTime: convertToTimeFormat(item.startAt),\n        endAtTime: convertToTimeFormat(item.endAt),\n        visitSchedule: processVisitSchedule(item.visitSchedule)\n    };\n\n    return {\n        ...timeFormattedItem,\n        property: processEntity(item.property),\n        quote: processEntity(item.quote),\n        request: processEntity(item.request),\n        salesperson: processSalesperson(item.salesperson),\n        lineItems: processLineItems(item.lineItems),\n        jobBalanceTotals: processJobBalanceTotals(item.jobBalanceTotals)\n    };\n});\n\n// Aplicando a mesma transformação para allData\nconst transformedAllData = allData.map(item => {\n    // Only convert startAt and endAt to time format\n    const timeFormattedItem = {\n        ...item,\n        startAtTime: convertToTimeFormat(item.startAt),\n        endAtTime: convertToTimeFormat(item.endAt),\n        visitSchedule: processVisitSchedule(item.visitSchedule)\n    };\n\n    return {\n        ...timeFormattedItem,\n        property: processEntity(item.property),\n        quote: processEntity(item.quote),\n        request: processEntity(item.request),\n        salesperson: processSalesperson(item.salesperson),\n        lineItems: processLineItems(item.lineItems),\n        jobBalanceTotals: processJobBalanceTotals(item.jobBalanceTotals)\n    };\n});\n\nreturn [{\n    json: {\n        allData: transformedAllData,\n        data: transformedNodes,\n        variables: {\n            first: 10,\n            after: pageInfo.endCursor\n        },\n        continuePagination: pageInfo.hasNextPage,\n        completed: !pageInfo.hasNextPage\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        540,
        1960
      ],
      "id": "13b14ac3-5007-4ec0-a6b5-a2283da63665",
      "name": "Pagination7"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst allData = inputData[0]?.json?.allData || [];\nreturn allData.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        1960
      ],
      "id": "1b6edbc5-0a8e-4d0a-b762-387533b4bbcc",
      "name": "Set Array",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "aux_buffer",
        "keyType": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        540,
        2200
      ],
      "id": "d1ab4a84-6c3e-4189-98f3-c57466ea7072",
      "name": "Retrieve aux_buffer4",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "aux_buffer",
        "messageData": "={{ JSON.stringify($json) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        920,
        1960
      ],
      "id": "12f158ff-8998-4c8d-8e52-3a64de2f8870",
      "name": "Push aux_buffer2",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        980,
        2200
      ],
      "id": "f6f8af0c-3870-400c-8eef-22f3ead04611",
      "name": "Loop Over Items3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1400,
        1960
      ],
      "id": "45bfe4ba-cfad-4942-98d8-683d93f2cca8",
      "name": "Limit11"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\nconst data = input[0].json.data;\n\nconst result = data.map(item => ({\n  json: JSON.parse(item)\n}));\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        2200
      ],
      "id": "fb58fab2-d176-45af-8d0b-a0cc9eb2cc23",
      "name": "Set Array14"
    },
    {
      "parameters": {
        "jsCode": "// Código n8n corrigido\nconst items = $input.all();\nconst data = items[0]?.json || {};\n\nif (!data.lineItems || !data.lineItems.nodes) {\n    throw new Error('Estrutura de dados inválida: lineItems ou nodes não encontrados');\n}\n\nreturn data.lineItems.nodes.map(item => ({\n    json: {\n        jobs_id: data.id,\n        id: item.id,\n        name: item.name,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: item.totalPrice\n    }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        2300
      ],
      "id": "72921422-26c7-487a-abc0-0f0a0d6ea74d",
      "name": "Set Array15",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2060,
        2180
      ],
      "id": "b0c59673-01d4-464f-a8df-c85c1a022e0d",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "aux_buffer"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        60,
        1960
      ],
      "id": "40c3b424-65ad-4e80-a531-97e22c19519e",
      "name": "zap aux_buffer2",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1800,
        2300
      ],
      "id": "c163f535-c32b-4190-b829-3bf5e1db9e1a",
      "name": "Limit12"
    },
    {
      "parameters": {
        "tableId": "quotes",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "jobber_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.title }}"
            },
            {
              "fieldId": "quote_number",
              "fieldValue": "={{ $json.quoteNumber }}"
            },
            {
              "fieldId": "quote_status",
              "fieldValue": "={{ $json.quoteStatus }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ $json.message ?? null }}\" }"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $json.createdAt }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $json.updatedAt }}"
            },
            {
              "fieldId": "transitioned_at",
              "fieldValue": "={{ $json.transitionedAt }}"
            },
            {
              "fieldId": "subtotal_amount",
              "fieldValue": "={{ $json.amounts.subtotal }}"
            },
            {
              "fieldId": "total_amount",
              "fieldValue": "={{ $json.amounts.total }}"
            },
            {
              "fieldId": "line_items",
              "fieldValue": "={{ JSON.stringify($json.lineItems?.nodes || []) }}"
            },
            {
              "fieldId": "property_jobber_id",
              "fieldValue": "={{ $json.property.id }}"
            },
            {
              "fieldId": "salesperson_jobber_id",
              "fieldValue": "={{ $json.salesperson.id }}"
            },
            {
              "fieldId": "request_title",
              "fieldValue": "={{ $json.request.title }}"
            },
            {
              "fieldId": "request_jobber_id",
              "fieldValue": "={{ $json.request.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1180,
        1320
      ],
      "id": "578524c1-48f6-4afc-902b-de4e4141fbe1",
      "name": "Supabase_quotes",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "quotes_line_items",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "quotes_jobber_id",
              "fieldValue": "{{ $json.quotes_id }}"
            },
            {
              "fieldId": "line_item_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $json.name }}"
            },
            {
              "fieldId": "quantity",
              "fieldValue": "={{ $json.quantity }}"
            },
            {
              "fieldId": "unit_price",
              "fieldValue": "={{ $json.unitPrice }}"
            },
            {
              "fieldId": "total_price",
              "fieldValue": "={{ $json.totalPrice }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1600,
        1680
      ],
      "id": "87b27111-b73a-4a7f-b019-cc454a195e17",
      "name": "Supabase_quotes_line_items",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "jobs_line_items",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "jobs_jobber_id",
              "fieldValue": "={{ $json.jobs_id }}"
            },
            {
              "fieldId": "line_item_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $json.name }}"
            },
            {
              "fieldId": "quantity",
              "fieldValue": "={{ $json.quantity }}"
            },
            {
              "fieldId": "unit_price",
              "fieldValue": "={{ $json.unitPrice }}"
            },
            {
              "fieldId": "total_price",
              "fieldValue": "={{ $json.totalPrice }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1600,
        2300
      ],
      "id": "e1ab1a6f-c74d-4014-9a87-77b3cac3097f",
      "name": "Supabase_jobs_line_items",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "\n## Invoices",
        "height": 660,
        "width": 2340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        3560
      ],
      "typeVersion": 1,
      "id": "1d7c277a-183a-4a6e-9171-12147eef4608",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "da7dcbb5-9ca9-4926-8e09-286907986e21",
              "leftValue": "={{ $('Pagination8').item.json.continuePagination }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        340,
        3880
      ],
      "id": "544a63db-11e2-4cf8-8057-abdbc6cbe96b",
      "name": "batch loop10"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eff9cc2d-c364-4859-902e-3ceb34481092",
              "name": "variables.first",
              "value": "={{ $('Pagination8').item.json.variables.first }}",
              "type": "number"
            },
            {
              "id": "499c7162-3df3-484c-85c2-d5f72b7bd3ec",
              "name": "variables.after",
              "value": "={{ $('Pagination8').item.json.variables.after }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1600,
        3640
      ],
      "id": "e39f8474-b30b-40f3-bf71-b80109a87e20",
      "name": "set loop10"
    },
    {
      "parameters": {
        "jsCode": "// Pegando o primeiro item do array 'items' no contexto do n8n\nconst result = items[0].json;\n\nif (!result?.data?.invoices?.nodes) {\n    return [{\n        json: {\n            error: 'Estrutura de resposta inválida',\n            continuePagination: false,\n            completed: true,\n            allData: items[0].json.allData || []\n        }\n    }];\n}\n\nconst { nodes, pageInfo } = result.data.invoices;\nconst allData = [...(items[0].json.allData || []), ...nodes];\n\n// Função para processar amounts\nfunction processAmounts(amounts) {\n    if (!amounts) return null;\n    return {\n        depositAmount: amounts.depositAmount ?? null,\n        discountAmount: amounts.discountAmount ?? null,\n        invoiceBalance: amounts.invoiceBalance ?? null,\n        legacyDiscountAmount: amounts.legacyDiscountAmount ?? null,\n        nonTaxAmount: amounts.nonTaxAmount ?? null,\n        paymentsTotal: amounts.paymentsTotal ?? null,\n        subtotal: amounts.subtotal ?? null,\n        taxAmount: amounts.taxAmount ?? null,\n        tipsTotal: amounts.tipsTotal ?? null,\n        total: amounts.total ?? null\n    };\n}\n\n// Função para processar billingAddress\nfunction processBillingAddress(address) {\n    if (!address) return null;\n    return {\n        street: address.street || null,\n        city: address.city || null,\n        province: address.province || null,\n        postalCode: address.postalCode || null,\n        country: address.country || null\n    };\n}\n\n// Função para processar client\nfunction processClient(client) {\n    if (!client) return null;\n    return {\n        id: client.id || null\n    };\n}\n\n// Função para processar jobs\nfunction processJobs(jobs) {\n    if (!jobs || !jobs.nodes) return null;\n    return {\n        nodes: jobs.nodes.map(job => ({\n            id: job.id || null\n        }))\n    };\n}\n\n// Função para processar lineItems.nodes\nfunction processLineItems(lineItems) {\n    if (!lineItems || !lineItems.nodes) return null;\n    return {\n        nodes: lineItems.nodes.map(item => ({\n            id: item.id || null,\n            name: item.name || null,\n            quantity: item.quantity ?? null,\n            unitPrice: item.unitPrice ?? null,\n            totalPrice: item.totalPrice ?? null,\n            taxable: item.taxable ?? null,\n            date: item.date || null,\n            category: item.category || null,\n            createdAt: item.createdAt || null,\n            updatedAt: item.updatedAt || null\n        }))\n    };\n}\n\n// Função para processar paymentRecords.nodes\nfunction processPaymentRecords(paymentRecords) {\n    if (!paymentRecords || !paymentRecords.nodes) return null;\n    return {\n        nodes: paymentRecords.nodes.map(record => ({\n            id: record.id || null,\n            amount: record.amount ?? null\n        }))\n    };\n}\n\n// Função para processar properties.nodes\nfunction processProperties(properties) {\n    if (!properties || !properties.nodes) return null;\n    return {\n        nodes: properties.nodes.map(property => ({\n            id: property.id || null,\n            address: property.address ? {\n                street: property.address.street || null,\n                city: property.address.city || null\n            } : null\n        }))\n    };\n}\n\n// Função para processar salesperson\nfunction processSalesperson(salesperson) {\n    if (!salesperson) return null;\n    return {\n        id: salesperson.id || null,\n        name: salesperson.name ? {\n            full: salesperson.name.full || null\n        } : null\n    };\n}\n\n// Aplicando a transformação nos dados\nconst transformedNodes = nodes.map(item => ({\n    id: item.id || null,\n    invoiceNumber: item.invoiceNumber || null,\n    invoiceStatus: item.invoiceStatus || null,\n    invoiceNet: item.invoiceNet ?? null,\n    \n    createdAt: item.createdAt || null,\n    updatedAt: item.updatedAt || null,\n    issuedDate: item.issuedDate || null,\n    dueDate: item.dueDate || null,\n    receivedDate: item.receivedDate || null,\n    \n    subject: item.subject || null,\n    \n    amounts: processAmounts(item.amounts),\n    billingAddress: processBillingAddress(item.billingAddress),\n    client: processClient(item.client),\n    jobs: processJobs(item.jobs),\n    lineItems: processLineItems(item.lineItems),\n    paymentRecords: processPaymentRecords(item.paymentRecords),\n    properties: processProperties(item.properties),\n    salesperson: processSalesperson(item.salesperson)\n}));\n\n// Aplicando a mesma transformação para allData\nconst transformedAllData = allData.map(item => ({\n    id: item.id || null,\n    invoiceNumber: item.invoiceNumber || null,\n    invoiceStatus: item.invoiceStatus || null,\n    invoiceNet: item.invoiceNet ?? null,\n    \n    createdAt: item.createdAt || null,\n    updatedAt: item.updatedAt || null,\n    issuedDate: item.issuedDate || null,\n    dueDate: item.dueDate || null,\n    receivedDate: item.receivedDate || null,\n    \n    subject: item.subject || null,\n    \n    amounts: processAmounts(item.amounts),\n    billingAddress: processBillingAddress(item.billingAddress),\n    client: processClient(item.client),\n    jobs: processJobs(item.jobs),\n    lineItems: processLineItems(item.lineItems),\n    paymentRecords: processPaymentRecords(item.paymentRecords),\n    properties: processProperties(item.properties),\n    salesperson: processSalesperson(item.salesperson)\n}));\n\nreturn [{\n    json: {\n        allData: transformedAllData,\n        data: transformedNodes,\n        variables: {\n            first: 5,\n            after: pageInfo.endCursor\n        },\n        continuePagination: pageInfo.hasNextPage,\n        completed: !pageInfo.hasNextPage\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        540,
        3640
      ],
      "id": "bc3d74e7-757b-4c35-ad13-0d00a13b4406",
      "name": "Pagination8"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all();\nconst allData = inputData[0]?.json?.allData || [];\nreturn allData.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        3640
      ],
      "id": "031d4ef2-c0a3-4f75-843f-5556213b76f0",
      "name": "Set Array16",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "aux_buffer",
        "keyType": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        540,
        3880
      ],
      "id": "d24478c7-b003-49f6-814d-5ae4574bb770",
      "name": "Retrieve aux_buffer6",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "aux_buffer",
        "messageData": "={{ JSON.stringify($json) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        920,
        3640
      ],
      "id": "bd03ca70-b5a1-4a0c-b9bd-30ab1a7bb62d",
      "name": "Push aux_buffer3",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        980,
        3880
      ],
      "id": "6acab29b-4716-425a-a2dc-25cbcd6b3e21",
      "name": "Loop Over Items4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1420,
        3640
      ],
      "id": "9be7eb51-89db-4ef4-967d-032131573d82",
      "name": "Limit13"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\nconst data = input[0].json.data;\n\nconst result = data.map(item => ({\n  json: JSON.parse(item)\n}));\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        3880
      ],
      "id": "688d99f1-4045-4669-9f63-6175b22f7f94",
      "name": "Set Array17"
    },
    {
      "parameters": {
        "jsCode": "// Código n8n corrigido\nconst items = $input.all();\nconst data = items[0]?.json || {};\n\nif (!data.lineItems || !data.lineItems.nodes) {\n    throw new Error('Estrutura de dados inválida: lineItems ou nodes não encontrados');\n}\n\nreturn data.lineItems.nodes.map(item => ({\n    json: {\n        jobs_id: data.id,\n        id: item.id,\n        name: item.name,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: item.totalPrice\n    }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        3980
      ],
      "id": "3ae5719c-db74-46c6-ae38-c46039ec6628",
      "name": "Set Array18",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2080,
        3860
      ],
      "id": "d46edf9e-633f-4848-819d-cf68b9260912",
      "name": "No Operation, do nothing4"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "aux_buffer"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        60,
        3640
      ],
      "id": "325984a4-5bc2-473b-9c32-1c1ca82792d0",
      "name": "zap aux_buffer3",
      "credentials": {
        "redis": {
          "id": "Yj8Yu3a3AZgluvcL",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1820,
        3980
      ],
      "id": "6be0e023-93b7-4fb3-8bee-583475e3b1db",
      "name": "Limit14"
    },
    {
      "parameters": {
        "tableId": "invoices_line_items",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "invoices_jobber_id"
            },
            {
              "fieldId": "line_item_id"
            },
            {
              "fieldId": "name"
            },
            {
              "fieldId": "quantity"
            },
            {
              "fieldId": "unit_price"
            },
            {
              "fieldId": "total_price"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1620,
        3980
      ],
      "id": "cc61b2a7-6c1e-4fe8-9664-4a79f08b0af3",
      "name": "Supabase_invoices_line_items",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "invoices",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "jobber_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "invoice_number",
              "fieldValue": "={{ $json.invoiceNumber }}"
            },
            {
              "fieldId": "invoice_status",
              "fieldValue": "={{ $json.invoiceStatus }}"
            },
            {
              "fieldId": "invoice_net",
              "fieldValue": "={{ $json.invoiceNet }}"
            },
            {
              "fieldId": "subject",
              "fieldValue": "={{ $json.subject }}"
            },
            {
              "fieldId": "amounts_json",
              "fieldValue": "={{ $json.amounts }}"
            },
            {
              "fieldId": "clients_jobber_id",
              "fieldValue": "={{ $json.client.id }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $('Set Array16').item.json.lineItems.nodes[0].createdAt }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $('Set Array16').item.json.lineItems.nodes[0].updatedAt }}"
            },
            {
              "fieldId": "issued_date",
              "fieldValue": "={{ $('Set Array16').item.json.issuedDate }}"
            },
            {
              "fieldId": "due_date",
              "fieldValue": "={{ $('Set Array16').item.json.dueDate }}"
            },
            {
              "fieldId": "received_date",
              "fieldValue": "={{ $('Set Array16').item.json.receivedDate }}"
            },
            {
              "fieldId": "jobs_jobber_id",
              "fieldValue": "={{ $('Set Array16').item.json.jobs.nodes[0].id }}"
            },
            {
              "fieldId": "line_items",
              "fieldValue": "={{ $('Set Array16').item.json.lineItems.nodes }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1200,
        3640
      ],
      "id": "9bf6b8b3-2a11-47a7-bc48-e31f879a2dfb",
      "name": "Supabase_invoices",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "endpoint": "https://api.getjobber.com/api/graphql",
        "requestFormat": "json",
        "query": "=query($first: Int!, $after: String) {\n  invoices(\n    first: $first, \n    after: $after,\n    filter: {\n      issuedDate: {\n        after: \"2024-06-01T00:00:00.000Z\",\n        before: \"2025-12-31T23:59:59.999Z\"\n      }\n    }\n  ) {\n    nodes {\n      id\n      invoiceNumber\n      invoiceStatus\n      invoiceNet\n      \n      createdAt\n      updatedAt\n      issuedDate\n      dueDate\n      receivedDate\n      \n      subject\n      \n      amounts {\n        depositAmount\n        discountAmount\n        invoiceBalance\n        legacyDiscountAmount\n        nonTaxAmount\n        paymentsTotal\n        subtotal\n        taxAmount\n        tipsTotal\n        total\n      }\n      \n      billingAddress {\n        street\n        city\n        province\n        postalCode\n        country\n      }\n      \n      client {\n        id\n      }\n      \n      lineItems {\n        nodes {\n          id\n          name\n          quantity\n          unitPrice\n          totalPrice\n          taxable\n          date\n          category\n          createdAt\n          updatedAt\n        }\n      }\n      \n      paymentRecords {\n        nodes {\n          id\n          amount\n        }\n      }\n      \n      properties {\n        nodes {\n          id\n          address {\n            street\n            city\n          }\n        }\n      }\n      \n      salesperson {\n        id\n        name {\n          full\n        }\n      }\n    }\n    \n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}",
        "variables": "={{ $json.variables || {\"first\": 5, \"after\": null} }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "X-JOBBER-GRAPHQL-VERSION",
              "value": "2025-01-20"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        320,
        3640
      ],
      "id": "182a982e-bf9e-49e7-be07-0c8478ee9e46",
      "name": "jobber query - invoices",
      "credentials": {
        "oAuth2Api": {
          "id": "bYFIrqt2IbgZU5Z1",
          "name": "JobberAPI_BI Compass APP"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "endpoint": "https://api.getjobber.com/api/graphql",
        "requestFormat": "json",
        "query": "=query($first: Int!, $after: String) {\n  jobs(first: $first, after: $after) {\n    nodes {\n      id\n      title\n      jobNumber\n      jobStatus\n      jobType\n      \n      createdAt\n      updatedAt\n      startAt\n      endAt\n      completedAt\n      bookingConfirmationSentAt\n      \n      property {\n        id\n      }\n      quote {\n        id\n      }\n      request {\n        id\n      }\n      \n      instructions\n      total\n      invoicedTotal\n      uninvoicedTotal\n      \n      lineItems {\n        nodes {\n          id\n          name\n          quantity\n          unitPrice\n          totalPrice\n        }\n      }\n      \n      visitSchedule {\n        assignedTo {\n        edges {\n          node {\n            id\n            name {\n              full\n            }\n          }\n        }\n      }\n          endDate\n          endTime\n          startDate\n          startTime\n          recurrenceSchedule {\n            calendarRule\n            friendly\n      }\n    }\n      \n\n      billingType\n      \n      jobBalanceTotals {\n        outstandingAmount\n        totalAmount\n      }\n      \n      quote {\n        id\n      }\n      \n      request {\n        id\n      }\n      \n      salesperson {\n        id\n        name {\n          full\n        }\n      }\n      \n      source\n      willClientBeAutomaticallyCharged\n      \n      \n      \n      defaultVisitTitle\n      allowReviewRequest\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}",
        "variables": "={{ $json.variables || {\"first\": 5, \"after\": null} }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "X-JOBBER-GRAPHQL-VERSION",
              "value": "2025-01-20"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        320,
        1960
      ],
      "id": "e53ab8ce-fea8-497e-8d09-400278e40ca5",
      "name": "jobber query - jobs",
      "credentials": {
        "oAuth2Api": {
          "id": "bYFIrqt2IbgZU5Z1",
          "name": "JobberAPI_BI Compass APP"
        }
      }
    },
    {
      "parameters": {
        "tableId": "jobs",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "jobber_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.title }}"
            },
            {
              "fieldId": "job_number",
              "fieldValue": "={{ $json.jobNumber }}"
            },
            {
              "fieldId": "job_status",
              "fieldValue": "={{ $json.jobStatus }}"
            },
            {
              "fieldId": "job_type",
              "fieldValue": "={{ $json.jobType }}"
            },
            {
              "fieldId": "property_jobber_id",
              "fieldValue": "={{ $json.property.id }}"
            },
            {
              "fieldId": "instructions",
              "fieldValue": "={{ $json.instructions }}"
            },
            {
              "fieldId": "booking_confirmation_sent_at",
              "fieldValue": "={{ $json.bookingConfirmationSentAt }}"
            },
            {
              "fieldId": "client_auto_charged",
              "fieldValue": "={{ $json.willClientBeAutomaticallyCharged }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $json.createdAt }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $json.updatedAt }}"
            },
            {
              "fieldId": "end_at",
              "fieldValue": "={{ $json.endAt }}"
            },
            {
              "fieldId": "start_at",
              "fieldValue": "={{ $json.startAt }}"
            },
            {
              "fieldId": "quote_jobber_id",
              "fieldValue": "={{ $json.quote?.id || null }}"
            },
            {
              "fieldId": "request_jobber_id",
              "fieldValue": "={{ $json.request?.id || null }}"
            },
            {
              "fieldId": "source",
              "fieldValue": "={{ $json.source }}"
            },
            {
              "fieldId": "line_items",
              "fieldValue": "={{ $json.lineItems.nodes }}"
            },
            {
              "fieldId": "total",
              "fieldValue": "={{ $json.total }}"
            },
            {
              "fieldId": "invoiced_total",
              "fieldValue": "={{ $json.invoicedTotal }}"
            },
            {
              "fieldId": "uninvoiced_total",
              "fieldValue": "={{ $json.uninvoicedTotal }}"
            },
            {
              "fieldId": "balance_outstanding_amount",
              "fieldValue": "={{ $json.jobBalanceTotals.outstandingAmount }}"
            },
            {
              "fieldId": "balance_total_amount",
              "fieldValue": "={{ $json.jobBalanceTotals.totalAmount }}"
            },
            {
              "fieldId": "start_time",
              "fieldValue": "={{ $json.startAtTime }}"
            },
            {
              "fieldId": "end_time",
              "fieldValue": "={{ $json.endAtTime }}"
            },
            {
              "fieldId": "assigned_to",
              "fieldValue": "={{ $json.visitSchedule.assignedTo.edges }}"
            },
            {
              "fieldId": "recurrence_schedule",
              "fieldValue": "={{ $json.visitSchedule.recurrenceSchedule?.friendly || null }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1180,
        1960
      ],
      "id": "a2ec2cf8-f1b8-42f2-a58d-fc28ae8dac3b",
      "name": "Supabase_jobs",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "endpoint": "https://api.getjobber.com/api/graphql",
        "requestFormat": "json",
        "query": "=query($first: Int!, $after: String) {\n  visits(\n    first: $first, \n    after: $after,\n    filter: {\n      startAt: {\n        after: \"2024-06-01T00:00:00.000Z\",\n        before: \"2025-12-31T23:59:59.999Z\"\n      }\n    }\n  ) {\n    nodes {\n      id\n      client {\n        id\n      }\n      property {\n        id\n      }\n      job {\n        id\n      }\n      invoice {\n        id\n      }\n      title              \n      isDefaultTitle     \n      instructions       \n      allDay             \n      arrivalWindow {    \n        id \n        duration\n      }\n      startAt            \n      endAt              \n      duration           \n      visitStatus        \n      createdAt\n      completedAt        \n      assignedUsers {    \n        edges {\n          node {\n            id\n            name {\n              first \n              last\n            }\n          }\n        }\n      }\n      isComplete         \n      isLastScheduledVisit \n      timeSheetEntries {   \n        edges {\n          node {\n            id          \n            startAt\n            endAt\n          }\n        }\n      }\n      lineItems {        \n        edges {\n          node {\n            id\n            name\n            quantity\n            unitPrice\n            totalPrice                      \n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}",
        "variables": "={{ $json.variables || {\"first\": 1, \"after\": null} }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "X-JOBBER-GRAPHQL-VERSION",
              "value": "2025-01-20"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1,
      "position": [
        280,
        2600
      ],
      "id": "3266f47e-19f1-4b88-9283-a86d786779f5",
      "name": "jobber query - visits",
      "credentials": {
        "oAuth2Api": {
          "id": "bYFIrqt2IbgZU5Z1",
          "name": "JobberAPI_BI Compass APP"
        }
      }
    },
    {
      "parameters": {
        "tableId": "visits",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "jobber_id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "job_jobber_id",
              "fieldValue": "={{ $json.job.id }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.title }}"
            },
            {
              "fieldId": "is_default_title",
              "fieldValue": "={{ $json.isDefaultTitle }}"
            },
            {
              "fieldId": "all_day",
              "fieldValue": "={{ $json.allDay }}"
            },
            {
              "fieldId": "start_at",
              "fieldValue": "={{ $json.startAt }}"
            },
            {
              "fieldId": "end_at",
              "fieldValue": "={{ $json.endAt }}"
            },
            {
              "fieldId": "duration",
              "fieldValue": "={{ $json.duration }}"
            },
            {
              "fieldId": "visit_status",
              "fieldValue": "={{ $json.visitStatus }}"
            },
            {
              "fieldId": "completed_at",
              "fieldValue": "={{ $json.completedAt }}"
            },
            {
              "fieldId": "is_complete",
              "fieldValue": "={{ $json.isComplete }}"
            },
            {
              "fieldId": "is_last_scheduled_visit",
              "fieldValue": "={{ $json.isLastScheduledVisit }}"
            },
            {
              "fieldId": "property_jobber_id",
              "fieldValue": "={{ $json.property.id }}"
            },
            {
              "fieldId": "invoice_jobber_id",
              "fieldValue": "={{ $json.invoice.id }}"
            },
            {
              "fieldId": "client_jobber_id",
              "fieldValue": "={{ $json.client.id }}"
            },
            {
              "fieldId": "assigned_users",
              "fieldValue": "={{ $json.assignedUsers.edges }}"
            },
            {
              "fieldId": "line_items",
              "fieldValue": "={{ $json.lineItems.edges }}"
            },
            {
              "fieldId": "time_sheet_entries_json",
              "fieldValue": "={{ $json.timeSheetEntries.edges }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $json.createdAt }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1180,
        2600
      ],
      "id": "ab73c177-e516-4c18-83b7-f1ae5acc3d60",
      "name": "Supabase_visits",
      "credentials": {
        "supabaseApi": {
          "id": "jZpaPsNpFVX4nSYw",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8538acdc-918a-4c79-8a73-6f0833504072",
              "leftValue": "={{ $json.lineItems.nodes }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1180,
        2260
      ],
      "id": "c5c769f9-bc03-47d4-9a0a-3c589d33bf2c",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "87b7ba3c-a68a-4495-b205-5d2120974a54",
              "leftValue": "={{ $json.lineItems.nodes }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1180,
        1640
      ],
      "id": "7fc73f17-96e1-4402-bde5-af5f154b458f",
      "name": "If1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8538acdc-918a-4c79-8a73-6f0833504072",
              "leftValue": "={{ $json.assignedUsers.edges }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1180,
        2900
      ],
      "id": "963e8b97-a425-459c-b3bc-f8ee661886e8",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8538acdc-918a-4c79-8a73-6f0833504072",
              "leftValue": "={{ $json.lineItems.nodes }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1200,
        3940
      ],
      "id": "2d29dbeb-9509-404f-816a-4eaf0e0c19dd",
      "name": "If3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8538acdc-918a-4c79-8a73-6f0833504072",
              "leftValue": "={{ $json.lineItems.edges }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1200,
        3240
      ],
      "id": "b0ddf9be-3901-4fcd-8fce-1a8c12ed9969",
      "name": "If4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        2600
      ],
      "id": "85f99b74-b579-444d-b6f1-ff9e122b02ce",
      "name": "Edit Fields"
    }
  ],
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Init counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "batch loop": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "jobber_query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set loop": {
      "main": [
        [
          {
            "node": "batch loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "set loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init counter": {
      "main": [
        [
          {
            "node": "jobber_query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        []
      ]
    },
    "Pagination": {
      "main": [
        [
          {
            "node": "Set Array1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "jobber query - properties": {
      "main": [
        [
          {
            "node": "Pagination5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "batch loop6": {
      "main": [
        [
          {
            "node": "No Operation, do nothing6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "jobber query - properties",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set loop6": {
      "main": [
        [
          {
            "node": "batch loop6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit6": {
      "main": [
        [
          {
            "node": "set loop6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init counter6": {
      "main": [
        [
          {
            "node": "jobber query - properties",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagination5": {
      "main": [
        [
          {
            "node": "Set Array6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array6": {
      "main": [
        [
          {
            "node": "Supabase_properties",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array1": {
      "main": [
        [
          {
            "node": "Supabase_clients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_clients": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_properties": {
      "main": [
        [
          {
            "node": "Limit6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "jobber_query": {
      "main": [
        [
          {
            "node": "Pagination",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "batch loop5": {
      "main": [
        [
          {
            "node": "No Operation, do nothing5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "jobber query - users1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set loop5": {
      "main": [
        [
          {
            "node": "batch loop5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit5": {
      "main": [
        [
          {
            "node": "set loop5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init counter5": {
      "main": [
        [
          {
            "node": "jobber query - users1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagination4": {
      "main": [
        [
          {
            "node": "Set Array5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array5": {
      "main": [
        [
          {
            "node": "Supabase_users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_users": {
      "main": [
        [
          {
            "node": "Limit5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "jobber query - users1": {
      "main": [
        [
          {
            "node": "Pagination4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "batch loop7": {
      "main": [
        [
          {
            "node": "No Operation, do nothing7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "jobber query - requests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set loop7": {
      "main": [
        [
          {
            "node": "batch loop7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit7": {
      "main": [
        [
          {
            "node": "set loop7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init counter7": {
      "main": [
        [
          {
            "node": "jobber query - requests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagination6": {
      "main": [
        [
          {
            "node": "Set Array7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array7": {
      "main": [
        [
          {
            "node": "Supabase_requests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "jobber query - requests": {
      "main": [
        [
          {
            "node": "Pagination6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_requests": {
      "main": [
        [
          {
            "node": "Limit7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve aux_buffer": {
      "main": [
        [
          {
            "node": "Set Array9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Push aux_buffer": {
      "main": [
        [
          {
            "node": "Supabase_visits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "No Operation, do nothing9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        []
      ]
    },
    "pagination1": {
      "main": [
        [
          {
            "node": "Set Array8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "batch loop8": {
      "main": [
        [
          {
            "node": "Retrieve aux_buffer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "jobber query - visits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set loop8": {
      "main": [
        [
          {
            "node": "batch loop8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array8": {
      "main": [
        [
          {
            "node": "Push aux_buffer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit8": {
      "main": [
        [
          {
            "node": "set loop8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array9": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array10": {
      "main": [
        [
          {
            "node": "Supabase_visits2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array11": {
      "main": [
        [
          {
            "node": "Supabase_visits3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing8": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "No Operation, do nothing9": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "zap aux_buffer": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_visits2": {
      "main": [
        [
          {
            "node": "Limit10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_visits3": {
      "main": [
        [
          {
            "node": "Limit4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "jobber query - quotes": {
      "main": [
        [
          {
            "node": "Pagination3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "batch loop4": {
      "main": [
        [
          {
            "node": "Retrieve aux_buffer2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "jobber query - quotes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set loop4": {
      "main": [
        [
          {
            "node": "batch loop4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagination3": {
      "main": [
        [
          {
            "node": "Set Array4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array4": {
      "main": [
        [
          {
            "node": "Push aux_buffer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve aux_buffer2": {
      "main": [
        [
          {
            "node": "Set Array12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Push aux_buffer1": {
      "main": [
        [
          {
            "node": "Supabase_quotes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [
          {
            "node": "No Operation, do nothing10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit9": {
      "main": [
        [
          {
            "node": "set loop4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array12": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array13": {
      "main": [
        [
          {
            "node": "Supabase_quotes_line_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing10": {
      "main": [
        []
      ]
    },
    "zap aux_buffer1": {
      "main": [
        [
          {
            "node": "jobber query - quotes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit4": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit10": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "batch loop9": {
      "main": [
        [
          {
            "node": "Retrieve aux_buffer4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "jobber query - jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set loop9": {
      "main": [
        [
          {
            "node": "batch loop9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagination7": {
      "main": [
        [
          {
            "node": "Set Array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array": {
      "main": [
        [
          {
            "node": "Push aux_buffer2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve aux_buffer4": {
      "main": [
        [
          {
            "node": "Set Array14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Push aux_buffer2": {
      "main": [
        [
          {
            "node": "Supabase_jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit11": {
      "main": [
        [
          {
            "node": "set loop9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array14": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array15": {
      "main": [
        [
          {
            "node": "Supabase_jobs_line_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "zap aux_buffer2": {
      "main": [
        [
          {
            "node": "jobber query - jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit12": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_quotes": {
      "main": [
        [
          {
            "node": "Limit9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_quotes_line_items": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_jobs_line_items": {
      "main": [
        [
          {
            "node": "Limit12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "batch loop10": {
      "main": [
        [
          {
            "node": "Retrieve aux_buffer6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "jobber query - invoices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set loop10": {
      "main": [
        [
          {
            "node": "batch loop10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagination8": {
      "main": [
        [
          {
            "node": "Set Array16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array16": {
      "main": [
        [
          {
            "node": "Push aux_buffer3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve aux_buffer6": {
      "main": [
        [
          {
            "node": "Set Array17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Push aux_buffer3": {
      "main": [
        [
          {
            "node": "Supabase_invoices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items4": {
      "main": [
        [
          {
            "node": "No Operation, do nothing4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit13": {
      "main": [
        [
          {
            "node": "set loop10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array17": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Array18": {
      "main": [
        [
          {
            "node": "Supabase_invoices_line_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "zap aux_buffer3": {
      "main": [
        [
          {
            "node": "jobber query - invoices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit14": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_invoices_line_items": {
      "main": [
        [
          {
            "node": "Limit14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_invoices": {
      "main": [
        [
          {
            "node": "Limit13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "jobber query - invoices": {
      "main": [
        [
          {
            "node": "Pagination8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "jobber query - jobs": {
      "main": [
        [
          {
            "node": "Pagination7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_jobs": {
      "main": [
        [
          {
            "node": "Limit11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "jobber query - visits": {
      "main": [
        [
          {
            "node": "pagination1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase_visits": {
      "main": [
        [
          {
            "node": "Limit8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Set Array15",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Set Array13",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Set Array10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Set Array11",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Set Array18",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "jobber query - visits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "3b89bde9-e7fe-4fed-8851-359118e15c56",
  "triggerCount": 0,
  "tags": []
}